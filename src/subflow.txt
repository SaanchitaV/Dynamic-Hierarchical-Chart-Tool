function CreateSubflowNodeSquare() {
    const ref = useRef(null);
    const refLeft = useRef(null);
    const refTop = useRef(null);
    const refRight = useRef(null);
    const refBottom = useRef(null);
    const onChange = useCallback((evt) => {
        console.log(evt.target.value);
    }, []);

    const [isHovering, setIsHovering] = useState(false);

    const handleMouseOver = () => {
        setIsHovering(true);
    };

    const handleMouseOut = () => {
        setIsHovering(false);
    }

    const [isShown, setIsShown] = useState(true)
    const handleClick = event => {

        setIsShown(current => !current);
    
    }


    useEffect (() => {
        const resizeableEle = ref.current;
        const styles = window.getComputedStyle(resizeableEle);
        let width = parseInt(styles.width, 10);
        let height = parseInt(styles.height, 10);
        let x = 0;
        let y = 0;

        resizeableEle.style.top = "50px";
        resizeableEle.style.left = "50px";

        //Right resize
        const onMouseMoveRightResize = (event) => {
            const dx = event.clientX - x;
            x = event.clientX;
            width = width + dx;
            resizeableEle.style.width = `${width}px`
        }

        const onMouseUpRightResize = (event) => {
            document.removeEventListener("mousemove", onMouseMoveRightResize);
            document.addEventListener("click", (e) =>{
                e.stopPropagation();
            })
        }

        const onMouseDownRightResize = (event) => {
            x = event.clientX;
            resizeableEle.style.left = styles.left;
            resizeableEle.style.right = null;
            document.addEventListener("mousemove", onMouseMoveRightResize);
            document.addEventListener("click", onMouseUpRightResize );
        }

        //Top Resize
        const onMouseMoveTopResize = (event) => {
            const dy = event.clientY - y;
            height = height - dy;
            y = event.clientY;
            resizeableEle. style.height = `${height}px`;

        }

        const onMouseUpTopResize = (event) => {
            document.removeEventListener("mousemove", onMouseMoveTopResize);
            document.addEventListener("click", (e) =>{
                e.stopPropagation();
            })
        }

        const onMouseDownTopResize = (event) => {
            y = event.clientY;
            const styles = window.getComputedStyle(resizeableEle);
            resizeableEle.style.bottom = styles.bottom;
            resizeableEle.style.top = null;
            document.addEventListener("mousemove", onMouseMoveTopResize);
            document.addEventListener("click", onMouseUpTopResize);

        }

        //Bottom resize
        const onMouseMoveBottomResize = (event) =>{
            const dy = event.clientY - y;
            height = height + dy;
            y = event.clientY;
            resizeableEle.style.height = `${height}px`;
        }

        const onMouseUpBottomResize = (event) => {
            document.removeEventListener("mousemove", onMouseMoveBottomResize);
            document.addEventListener("click", (e) =>{
                e.stopPropagation();
            })
        }

        const onMouseDownBottomResize = (event) => {
            y = event.clientY;
            const styles = window.getComputedStyle(resizeableEle);
            resizeableEle.style.top = styles.top;
            resizeableEle.style.bottom = null;
            document.addEventListener("mousemove", onMouseMoveBottomResize);
            document.addEventListener("click", onMouseUpBottomResize);
        }

        //Left resize

        const onMouseMoveLeftResize = (event) => {
            const dx = event.clientX - x;
            x = event.clientX;
            width = width - dx;
            resizeableEle.style.width = `${width}px`;
        }

        const onMouseUpLeftResize = (event) => {
            document.removeEventListener("mousemove", onMouseMoveLeftResize);
            document.addEventListener("click", (e) =>{
                e.stopPropagation();
            })
        }

        const onMouseDownLeftResize = (event) => {
            x = event.clientX;
            resizeableEle.style.right = styles.right;
            resizeableEle.style.left = null;
            document.addEventListener("mousemove", onMouseMoveLeftResize);
            document.addEventListener("click", onMouseUpLeftResize);
        }

        
    


        const resizerRight = refRight.current;
        resizerRight.addEventListener("mousedown", onMouseDownRightResize);

        const resizerTop = refTop.current;
        resizerTop.addEventListener("mousedown", onMouseDownTopResize);

        const resizerBottom = refBottom.current;
        resizerBottom.addEventListener("mousedown", onMouseDownBottomResize);

        const resizerLeft = refLeft.current;
        resizerLeft.addEventListener("mousedown", onMouseDownLeftResize);


        return () => {
            resizerRight.removeEventListener("click", onMouseUpRightResize);
            resizerTop.removeEventListener("click", onMouseUpTopResize);
            resizerBottom.removeEventListener("click", onMouseUpBottomResize);
            resizerLeft.removeEventListener("click", onMouseUpLeftResize);

        }
    },[])

    return (
        <div>
            { isShown && (
                 <div ref={ref} className="resize">
                     
                 <Handle type="target" position={Position.Top}/>
                 < >
               
                     <label id="sbf" onClick={handleClick} onMouseOver={handleMouseOver} onMouseOut={handleMouseOut} >x</label>
                 
                 </>
                 <div ref={refLeft} className="resizer-l"></div>
                 <div ref={refTop} className="resizer-t"></div>
                 <div ref={refRight} className="resizer-r"></div>
                 <div ref={refBottom} className="resizer-b"></div>
                 <Handle type="source" position={Position.Bottom}/>
             </div>

            )}
            
        </div>

    )
}

function CreateSubflowNodeCircle() {
    const ref = useRef(null);
    const refLeft = useRef(null);
    const refTop = useRef(null);
    const refRight = useRef(null);
    const refBottom = useRef(null);
    const onChange = useCallback((evt) => {
        console.log(evt.target.value);
    }, []);

    const [isHovering, setIsHovering] = useState(false);

    const handleMouseOver = () => {
        setIsHovering(true);
    };

    const handleMouseOut = () => {
        setIsHovering(false);
    }

    const [isShown, setIsShown] = useState(true)
    const handleClick = event => {

        setIsShown(current => !current);
    
    }


    useEffect (() => {
        const resizeableEle = ref.current;
        const styles = window.getComputedStyle(resizeableEle);
        let width = parseInt(styles.width, 10);
        let height = parseInt(styles.height, 10);
        let x = 0;
        let y = 0;

        resizeableEle.style.top = "50px";
        resizeableEle.style.left = "50px";

        //Right resize
        const onMouseMoveRightResize = (event) => {
            const dx = event.clientX - x;
            x = event.clientX;
            width = width + dx;
            resizeableEle.style.width = `${width}px`
        }

        const onMouseUpRightResize = (event) => {
            document.removeEventListener("mousemove", onMouseMoveRightResize);
            document.addEventListener("click", (e) =>{
                e.stopPropagation();
            })
        }

        const onMouseDownRightResize = (event) => {
            x = event.clientX;
            resizeableEle.style.left = styles.left;
            resizeableEle.style.right = null;
            document.addEventListener("mousemove", onMouseMoveRightResize);
            document.addEventListener("click", onMouseUpRightResize );
        }

        //Top Resize
        const onMouseMoveTopResize = (event) => {
            const dy = event.clientY - y;
            height = height - dy;
            y = event.clientY;
            resizeableEle. style.height = `${height}px`;

        }

        const onMouseUpTopResize = (event) => {
            document.removeEventListener("mousemove", onMouseMoveTopResize);
            document.addEventListener("click", (e) =>{
                e.stopPropagation();
            })
        }

        const onMouseDownTopResize = (event) => {
            y = event.clientY;
            const styles = window.getComputedStyle(resizeableEle);
            resizeableEle.style.bottom = styles.bottom;
            resizeableEle.style.top = null;
            document.addEventListener("mousemove", onMouseMoveTopResize);
            document.addEventListener("click", onMouseUpTopResize);

        }

        //Bottom resize
        const onMouseMoveBottomResize = (event) =>{
            const dy = event.clientY - y;
            height = height + dy;
            y = event.clientY;
            resizeableEle.style.height = `${height}px`;
        }

        const onMouseUpBottomResize = (event) => {
            document.removeEventListener("mousemove", onMouseMoveBottomResize);
            document.addEventListener("click", (e) =>{
                e.stopPropagation();
            })
        }

        const onMouseDownBottomResize = (event) => {
            y = event.clientY;
            const styles = window.getComputedStyle(resizeableEle);
            resizeableEle.style.top = styles.top;
            resizeableEle.style.bottom = null;
            document.addEventListener("mousemove", onMouseMoveBottomResize);
            document.addEventListener("click", onMouseUpBottomResize);
        }

        //Left resize

        const onMouseMoveLeftResize = (event) => {
            const dx = event.clientX - x;
            x = event.clientX;
            width = width - dx;
            resizeableEle.style.width = `${width}px`;
        }

        const onMouseUpLeftResize = (event) => {
            document.removeEventListener("mousemove", onMouseMoveLeftResize);
            document.addEventListener("click", (e) =>{
                e.stopPropagation();
            })
        }

        const onMouseDownLeftResize = (event) => {
            x = event.clientX;
            resizeableEle.style.right = styles.right;
            resizeableEle.style.left = null;
            document.addEventListener("mousemove", onMouseMoveLeftResize);
            document.addEventListener("click", onMouseUpLeftResize);
        }

        
    


        const resizerRight = refRight.current;
        resizerRight.addEventListener("mousedown", onMouseDownRightResize);

        const resizerTop = refTop.current;
        resizerTop.addEventListener("mousedown", onMouseDownTopResize);

        const resizerBottom = refBottom.current;
        resizerBottom.addEventListener("mousedown", onMouseDownBottomResize);

        const resizerLeft = refLeft.current;
        resizerLeft.addEventListener("mousedown", onMouseDownLeftResize);


        return () => {
            resizerRight.removeEventListener("click", onMouseUpRightResize);
            resizerTop.removeEventListener("click", onMouseUpTopResize);
            resizerBottom.removeEventListener("click", onMouseUpBottomResize);
            resizerLeft.removeEventListener("click", onMouseUpLeftResize);

        }
    },[])

    return (
        <div>
            { isShown && (
                 <div ref={ref} className="resize-circle">
                     
                 <Handle type="target" position={Position.Top}/>
                 < >
               
                     <label id="sbf" onClick={handleClick} onMouseOver={handleMouseOver} onMouseOut={handleMouseOut} >x</label>
                 
                 </>
                 <div ref={refLeft} className="resizer-l"></div>
                 <div ref={refTop} className="resizer-t"></div>
                 <div ref={refRight} className="resizer-r"></div>
                 <div ref={refBottom} className="resizer-b"></div>
                 <Handle type="source" position={Position.Bottom}/>
             </div>

            )}
            
        </div>

    )
}